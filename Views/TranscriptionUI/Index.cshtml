@{
    ViewData["Title"] = "Speech-to-Text";
}

<!DOCTYPE html>
<html>
<head>    
    <link href="~/css/site.css" rel="stylesheet" />
    @* <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet"> *@ @* alignment issue - so commented *@
</head>
<body>
    <div class="MicContent">
    <p>Speak Here.....
    <span class="microphone" onclick="toggleRecording()">&#127908;</span>
    </p>
    </div>
    <br />
    <br />
    <br />
    @*  without popup start*@
    @* <div id="Response" class="containerdynamic-border">
        <div>
            <p id="recordingStatus"></p>
            <p id="transcriptionStatus"></p>
        </div>
        <br />
        <div id="transcription"></div>
    </div> *@
    @*  without popup end *@
     <div class="modal" id="responseModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" id="PopupControl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Speech-to-Text Details</h5>
                    <button type="button" onclick="stopRecordingAndSave()" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div>
                        <p id="recordingStatus"></p>
                        <p id="transcriptionStatus"></p>
                    </div>
                    <br />
                    <div id="transcription"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" onclick="saveContent()" class="btn btn-primary">Save Content</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let recordingStatus = document.getElementById('recordingStatus');
        let transcriptionStatus = document.getElementById('transcriptionStatus');
        let transcriptionDiv = document.getElementById('transcription');
        let mediaRecorder;
        let audioChunks = [];
        let isRecording = false;

        let recognition = new webkitSpeechRecognition() || new SpeechRecognition();
        recognition.continuous = true;
        recognition.lang = 'en-US';

        recognition.onresult = function (event) {
            const transcript = event.results[0][0].transcript.toLowerCase();
            console.log('You said:', transcript);

            if (transcript.includes('stop recording')) {
                toggleRecording();
            }
        };

        function toggleRecording() {
            if (!isRecording) {
                startRecording();
            } else {
                stopRecording();
            }
        }

        function startRecording() {
            //$('#Response').css('display', 'inline-block');//without popup
             $('#responseModal').modal('show');
            navigator.mediaDevices.getUserMedia({ audio: true })
                .then(function (stream) {
                    mediaRecorder = new MediaRecorder(stream);

                    mediaRecorder.ondataavailable = function (event) {
                        if (event.data.size > 0) {
                            audioChunks.push(event.data);
                            console.log('Audio chunk added.');
                        }
                    };

                    mediaRecorder.onstop = function () {
                        console.log('Recording stopped...');
                        processAudio();
                    };

                    mediaRecorder.start();                        
                    recordingStatus.textContent = 'Recording started...';

                    recognition.start();
                    isRecording = true;
                    console.log('Listening for voice commands...');
                })
                .catch(function (err) {
                    console.error('Error accessing microphone:', err);
                });
        };

        function stopRecording() {
             // $('#responseModal').modal('hide'); //without popup
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                mediaRecorder.stop();
                isRecording = false;
                recordingStatus.textContent = 'Recording stopped by user.';
                processAudio();
            }
        }

        function saveContent() {
            var content = document.getElementById('transcription').textContent;
            var fileName = 'transcription.txt';

            saveAsTextFile(content, fileName);
        }
      
        function stopRecordingAndSave() {
            stopRecording();
            saveContent();
        }
       
        function saveAsTextFile(content, fileName) {
            var element = document.createElement('a');
            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));
            element.setAttribute('download', fileName);
            element.style.display = 'none';

            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
        }

        function processAudio() {
            if (audioChunks.length === 0) {
                transcriptionStatus.textContent = 'No audio recorded.';
                return;
            }

            let audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
            sendAudioToBackend(audioBlob);
        }

       
        function sendAudioToBackend(blob) {        
            let formData = new FormData();
            formData.append('audio', blob);

            fetch('/api/transcribe', {
                method: 'POST',
                body: formData
            })
                .then(response => response.text())
                .then(data => {
                    console.log('Transcription from server:', data);
                    transcriptionDiv.textContent = 'Transcription: ' + data;
                    transcriptionStatus.textContent = 'Transcription complete.';
                })
                .catch(error => {
                    console.error('Error:', error);
                    transcriptionStatus.textContent = 'Error transcribing audio: ' + error;
                });
        }
    </script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
